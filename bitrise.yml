format_version: "11"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ios
app:
  envs:
  - FASTLANE_XCODE_LIST_TIMEOUT: "120"
  - DEFAULT_TEST_DEVICE: platform=iOS Simulator,name=iPhone 12 mini,OS=16.4
  - BITRISE_PROJECT_PATH: Stripe.xcworkspace
  - GIT_AUTHOR_NAME: Bitrise CI
  - GIT_AUTHOR_EMAIL: mobile-sdk-team@stripe.com
  - GIT_COMMITTER_NAME: Bitrise CI
  - GIT_COMMITTER_EMAIL: mobile-sdk-team@stripe.com
  - opts:
      is_expand: false
    FASTLANE_WORK_DIR: .
  - opts:
      is_expand: false
    FASTLANE_LANE: ios integration_all
trigger_map:
- push_branch: master
  pipeline: main-trigger-pipeline
- pull_request_source_branch: releases/*
  pipeline: releases-trigger-pipeline
- pull_request_source_branch: '*'
  pipeline: main-trigger-pipeline
pipelines:
  main-trigger-pipeline:
    stages:
    - stage-change-detection: {}
    - stage-conditional-tests: {}
  releases-trigger-pipeline:
    stages:
    - stage-releases-run-all: {}
  nightly-pipeline:
    stages:
    - stage-nightly-all: {}
stages:
  stage-change-detection:
    workflows:
    - detect-changes: {}
  stage-conditional-tests:
    workflows:
    - conditional-framework-tests:
        run_if: '{{enveq "RUN_FRAMEWORK_TESTS" "true"}}'
    - conditional-ui-tests:
        run_if: '{{enveq "RUN_UI_TESTS" "true"}}'
    - conditional-integration-tests:
        run_if: '{{enveq "RUN_INTEGRATION_TESTS" "true"}}'
    - conditional-lint-tests:
        run_if: '{{enveq "RUN_LINT" "true"}}'
    - conditional-build-tests:
        run_if: '{{enveq "RUN_FRAMEWORK_TESTS" "true"}}'
    - size-report:
        run_if: '{{enveq "RUN_FRAMEWORK_TESTS" "true"}}'
    - lokalise-upload:
        run_if: '{{enveq "RUN_FRAMEWORK_TESTS" "true"}}'
  stage-trigger-run-all:
    workflows:
    - framework-tests: {}
    - test-builds-xcode-15: {}
    - test-builds-xcode-16: {}
    - test-builds-vision: {}
    - install-tests-non-carthage: {}
    - lint-tests: {}
    - size-report: {}
    - ui-tests-1: {}
    - ui-tests-2: {}
    - ui-tests-3: {}
    - ui-tests-4: {}
    - ui-tests-5: {}
    - integration-all: {}
    - lokalise-upload: {}
  stage-releases-run-all:
    workflows:
    - framework-tests-no-mocks: {}
    - test-builds-xcode-15: {}
    - test-builds-xcode-16: {}
    - test-builds-xcode-15-release: {}
    - test-builds-xcode-16-release: {}
    - test-builds-vision: {}
    - deploy-docs: {}
    - install-tests-non-carthage: {}
    - lint-tests: {}
    - size-report: {}
    - ui-tests-1: {}
    - ui-tests-2: {}
    - ui-tests-3: {}
    - ui-tests-4: {}
    - ui-tests-5: {}
    - legacy-tests-15: {}
    - legacy-tests-16: {}
    - carthage-install-test: {}
    - pod-lint-tests: {}
    - integration-all: {}
  stage-nightly-all:
    workflows:
    - test-builds-xcode-15-release: {}
    - test-builds-xcode-16-release: {}
    - framework-tests-no-mocks: {}
    - check-docs: {}
    - legacy-tests-15: {}
    - legacy-tests-16: {}
    - carthage-install-test: {}
    - deploy-dry-run: {}
    - pod-lint-tests: {}
workflows:
  carthage-install-test:
    steps:
    - fastlane@3:
        inputs:
        - lane: installation_carthage
        title: fastlane installation_carthage
    before_run:
    - prep_all
    after_run:
    - notify_ci
    envs:
    - DEFAULT_TEST_DEVICE: platform=iOS Simulator,name=iPhone 12 mini,OS=16.4
  check-docs:
    steps:
    - script@1:
        inputs:
        - content: bundle exec ./ci_scripts/build_documentation.rb
        title: Build documentation
    before_run:
    - prep_all
    after_run:
    - notify_ci
  deploy-docs:
    steps:
    - activate-ssh-key@4: {}
    - script@1:
        inputs:
        - content: bundle config set path 'vendor/bundle'
        is_always_run: true
        title: Set Bundler to use local vendor directory
    - git-clone@6:
        inputs:
        - merge_pr: "no"
        - fetch_tags: "yes"
    - restore-cache@2.4:
        inputs:
        - key: bundle-cache-{{ checksum "Gemfile.lock" }}
    - bundler@0: {}
    - save-cache@1:
        inputs:
        - key: bundle-cache-{{ checksum "Gemfile.lock" }}
        - paths: |
            vendor
    - script@1:
        inputs:
        - content: git fetch origin
        title: Fetch full branch history
    - script@1:
        inputs:
        - content: bundle exec ./ci_scripts/build_documentation.rb --publish
        title: Build documentation
  deploy-dry-run:
    steps:
    - script@1:
        inputs:
        - content: brew install sourcekitten
        is_always_run: true
        title: Install Sourcekitten
    - script@1:
        inputs:
        - content: bundle exec ./ci_scripts/create_release.rb --version 99.99.99 --dry-run
        is_always_run: true
        title: Create release
    - script@1:
        inputs:
        - content: bundle exec ./ci_scripts/deploy_release.rb --dry-run
        is_always_run: true
        title: Deploy release
    - script@1:
        inputs:
        - content: bundle exec ./ci_scripts/export_builds.rb
        is_always_run: true
        title: Export builds
    before_run:
    - prep_all
    after_run:
    - notify_ci
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
    envs:
    - DEFAULT_TEST_DEVICE: platform=iOS Simulator,name=iPhone 12 mini,OS=16.4
  deploy-example-apps:
    steps:
    - set-xcode-build-number@1:
        inputs:
        - plist_path: '$BITRISE_SOURCE_DIR/Example/PaymentSheet Example/PaymentSheet Example/Info.plist'
    - set-xcode-build-number@1:
        inputs:
        - plist_path: '$BITRISE_SOURCE_DIR/Example/IdentityVerification Example/IdentityVerification Example/Info.plist'
    - xcode-archive@4:
        inputs:
        - project_path: Stripe.xcworkspace
        - distribution_method: app-store
        - automatic_code_signing: apple-id
        - xcodebuild_options: DEVELOPMENT_TEAM=Y28TH9SHX7
        - scheme: PaymentSheet Example
    - xcode-archive@4:
        inputs:
        - project_path: Stripe.xcworkspace
        - distribution_method: app-store
        - automatic_code_signing: apple-id
        - xcodebuild_options: DEVELOPMENT_TEAM=Y28TH9SHX7
        - scheme: IdentityVerification Example
    - deploy-to-bitrise-io@2: {}
    before_run:
    - prep_all
  financial-connections-stability-tests:
    before_run:
    - prep_all
    steps:
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: FinancialConnections Example
    - slack@3:
        is_always_run: true
        run_if: .IsBuildFailed
        inputs:
        - webhook_url: $WEBHOOK_SLACK_CUX_BOTS
        - webhook_url_on_error: $WEBHOOK_SLACK_CUX_BOTS
        - text_on_error: "iOS build failed (c.c. @link-mobile-run)"
    - slack@3:
        is_always_run: true
        inputs:
        - webhook_url: $WEBHOOK_SLACK_CONNECTIONS_MOBILE
        - webhook_url_on_error: $WEBHOOK_SLACK_CONNECTIONS_MOBILE
    - slack@3:
        is_always_run: true
        run_if: .IsBuildFailed
        inputs:
        - webhook_url: $SLACK_KGAIDIS_TESTING_WEBHOOK_URL
        - webhook_url_on_error: $SLACK_KGAIDIS_TESTING_WEBHOOK_URL
    - slack@3:
        is_always_run: true
        run_if: .IsBuildFailed
        inputs:
        - webhook_url: $SLACK_CONNECTIONS_IOS_FAILURES_WEBHOOK_URL
        - webhook_url_on_error: $SLACK_CONNECTIONS_IOS_FAILURES_WEBHOOK_URL
    - deploy-to-bitrise-io@2: {}
    envs:
    - DEFAULT_TEST_DEVICE: platform=iOS Simulator,name=iPhone 12 mini,OS=16.4
  financial-connections-stability-tests-for-edge:
    before_run:
    - prep_all
    steps:
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: FinancialConnections Example
    - deploy-to-bitrise-io@2: {}
    envs:
    - DEFAULT_TEST_DEVICE: platform=iOS Simulator,name=iPhone 12 mini,OS=16.4
  framework-tests:
    steps:
    - fastlane@3:
        inputs:
        - lane: preflight
        title: fastlane preflight
    - fastlane@3:
        inputs:
        - lane: threeds2_tests
        title: fastlane threeds2_tests
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: StripeiOS
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: StripePayments
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: StripePaymentsUI
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: StripePaymentSheet
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: StripeCameraCore
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: StripeCore
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: StripeConnect
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: StripeIdentity
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: StripeFinancialConnections
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: StripeCardScan
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: StripeApplePay
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: StripeUICore
    - deploy-to-bitrise-io@2: {}
    - save-spm-cache@1: {}
    before_run:
    - prep_all
    after_run: []
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
  framework-tests-no-mocks:
    steps:
    - fastlane@3:
        inputs:
        - lane: preflight
        title: fastlane preflight
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: AllStripeFrameworks-NoMocks
    - deploy-to-bitrise-io@2: {}
    - save-spm-cache@1: {}
    before_run:
    - prep_all
    after_run:
    - notify_ci
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
  test-builds-xcode-15:
    steps:
    - xcode-build-for-test@2:
        inputs:
        - scheme: AllStripeFrameworks
        - destination: generic/platform=iOS Simulator
    - deploy-to-bitrise-io@2: {}
    envs:
    - DEFAULT_TEST_DEVICE: platform=iOS Simulator,name=iPhone 15,OS=17.0
    before_run:
    - prep_all
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
  test-builds-xcode-16:
    steps:
    - xcode-build-for-test@2:
        inputs:
        - scheme: AllStripeFrameworks
        - destination: generic/platform=iOS Simulator
    - deploy-to-bitrise-io@2: {}
    envs:
    - DEFAULT_TEST_DEVICE: platform=iOS Simulator,name=iPhone 15,OS=18.0
    before_run:
    - prep_all
    meta:
      bitrise.io:
        stack: osx-xcode-16.0.x
        machine_type_id: g2.mac.large
  test-builds-xcode-15-release:
    steps:
    - script@1:
        inputs:
        - content: xcodebuild build -workspace "Stripe.xcworkspace" -scheme "AllStripeFrameworks" -configuration "Release" -sdk "iphonesimulator" | xcpretty
        title: Build release builds
    before_run:
    - prep_all
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
  test-builds-xcode-16-release:
    steps:
    - script@1:
        inputs:
        - content: xcodebuild build -workspace "Stripe.xcworkspace" -scheme "AllStripeFrameworks" -configuration "Release" -sdk "iphonesimulator" | xcpretty
        title: Build release builds
    before_run:
    - prep_all
    meta:
      bitrise.io:
        stack: osx-xcode-16.0.x
        machine_type_id: g2.mac.large
  test-builds-vision:
    steps:
    - xcode-build-for-test@2:
        inputs:
        - scheme: StripePaymentSheet
        - destination: generic/platform=visionOS Simulator
    - deploy-to-bitrise-io@2: {}
    before_run:
    - prep_all
    meta:
      bitrise.io:
        stack: osx-xcode-15.2.x
        machine_type_id: g2.mac.large
  install-tests-non-carthage:
    steps:
    - fastlane@3:
        inputs:
        - lane: installation_cocoapods_without_frameworks_objc
        title: fastlane installation_cocoapods_without_frameworks_objc
    - fastlane@3:
        inputs:
        - lane: installation_cocoapods_frameworks_objc
        title: fastlane installation_cocoapods_frameworks_objc
    - fastlane@3:
        inputs:
        - lane: installation_cocoapods_frameworks_swift
        title: fastlane installation_cocoapods_frameworks_swift
    - fastlane@3:
        inputs:
        - lane: installation_spm_objc
        title: fastlane installation_spm_objc
    - fastlane@3:
        inputs:
        - lane: installation_spm_swift
        title: fastlane installation_spm_swift
    before_run:
    - prep_all
    envs:
    - DEFAULT_TEST_DEVICE: platform=iOS Simulator,name=iPhone 12 mini,OS=16.4
  integration-all:
    steps:
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: IntegrationTester
        - log_formatter: xcbeautify
    - deploy-to-bitrise-io@2: {}
    before_run:
    - prep_all
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
    envs:
    - DEFAULT_TEST_DEVICE: platform=iOS Simulator,name=iPhone 12 mini,OS=16.4
  legacy-tests-15:
    steps:
    - fastlane@3:
        inputs:
        - lane: legacy_tests_15
        title: fastlane legacy_tests_15
    envs:
    - DEFAULT_TEST_DEVICE: platform=iOS Simulator,name=iPhone 12 mini,OS=15.5
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
    before_run:
    - prep_all
    after_run:
    - upload_logs
    - notify_ci
  legacy-tests-16:
    steps:
    - fastlane@3:
        inputs:
        - lane: legacy_tests_16
        title: fastlane legacy_tests_16
    envs:
    - DEFAULT_TEST_DEVICE: platform=iOS Simulator,name=iPhone 12 mini,OS=16.4
    before_run:
    - prep_all
    after_run:
    - upload_logs
    - notify_ci
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
  lint-tests:
    steps:
    - git-clone@8.2:
        inputs:
        - merge_pr: "no"
        - clone_depth: -1
    - script@1:
        inputs:
        - content: git fetch origin master
        title: Fetch origin/master
    - script@1:
        inputs:
        - content: ./ci_scripts/lint_modified_files.sh
        title: Run swiftlint
    - script@1:
        inputs:
        - content: ./ci_scripts/check_paymentsheet_test_sharding.rb
        title: Check PaymentSheet test sharding
    - script@1:
        inputs:
        - content: ./ci_scripts/check_image_format.sh
        title: Check png image format is 8-bit
    - fastlane@3:
        inputs:
        - lane: build_extras
        title: fastlane build_extras
    - fastlane@3:
        inputs:
        - lane: analyze
        title: fastlane analyze
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
  notify_ci:
    steps:
    - script@1:
        inputs:
        - content: ./ci_scripts/notify_ci.rb
        title: Send notification if failed
        is_always_run: true
        run_if: .IsBuildFailed
  lokalise-upload:
    steps:
    - script@1:
        inputs:
        - content: bundle exec ./ci_scripts/upload_localized_strings_to_lokalise.sh
        title: Upload strings to lokalise
    before_run:
    - prep_all
    envs:
      - LOKALISE_API_KEY: $LOKALISE_API_KEY
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
  pod-lint-tests:
    steps:
    - script@1:
        inputs:
        - content: pod lib lint --include-podspecs='*.podspec' --external-podspecs='ExternalPodspecs/*.podspec'
        title: pod lib lint
    before_run:
    - prep_all
    envs:
    - DEFAULT_TEST_DEVICE: platform=iOS Simulator,name=iPhone 12 mini,OS=16.4
  prep_all:
    steps:
    - xcode-start-simulator@0:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
    - set-env-var@0:
        inputs:
        - destination_keys: CONFIGURATION_BUILD_DIR
        - value: $BITRISE_SOURCE_DIR/stpbuild/products
        title: Set CONFIGURATION_BUILD_DIR
    - set-env-var@0:
        inputs:
        - destination_keys: CONFIGURATION_TEMP_DIR
        - value: $BITRISE_SOURCE_DIR/stpbuild/intermediates
        title: Set CONFIGURATION_TEMP_DIR
    - script@1:
        inputs:
        - content: bundle config set path 'vendor/bundle'
        is_always_run: true
        title: Set Bundler to use local vendor directory
    - git-clone@8.2:
        inputs:
        - clone_depth: "1"
    - restore-cache@2.4:
        inputs:
        - key: bundle-cache-{{ checksum "Gemfile.lock" }}
    - bundler@0: {}
    - save-cache@1:
        inputs:
        - key: bundle-cache-{{ checksum "Gemfile.lock" }}
        - paths: |
            vendor
    - restore-spm-cache@2.1: {}
  size-report:
    steps:
    - script@1:
        inputs:
        - content: bundle config set path 'vendor/bundle'
        is_always_run: true
        title: Set Bundler to use local vendor directory
    - git-clone@8.2:
        inputs:
        - merge_pr: "no"
        - clone_depth: -1
    - restore-cache@2.4:
        inputs:
        - key: bundle-cache-{{ checksum "Gemfile.lock" }}
    - bundler@0: {}
    - save-cache@1:
        inputs:
        - key: bundle-cache-{{ checksum "Gemfile.lock" }}
        - paths: |
            vendor
    - script@1:
        inputs:
        - content: git fetch origin
        title: Fetch full branch history
    - script@1:
        inputs:
        - content: bundle exec fastlane size_report
        title: Generate size report
    meta:
      bitrise.io:
        stack: osx-xcode-15.3.x
        machine_type_id: g2.mac.large
  ui-tests-1:
    steps:
    - script@1:
        inputs:
        - content: IOS_SIMULATOR_UDID=`xcrun xctrace list devices 2>&1 | grep "iPhone 12 mini Simulator\ (16.4)" | awk -F " " '{print $NF}' | tr -d "()" |tail -1` && open -a "simulator" --args -CurrentDeviceUDID $IOS_SIMULATOR_UDID
        title: Warm up emulator (iPhone 12 mini, OS=16.4)
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: PaymentSheet Example
        - test_plan: PaymentSheet Example-Shard1
        - log_formatter: xcbeautify
        - xcodebuild_options: -parallel-testing-enabled YES -maximum-parallel-testing-workers 2
    - deploy-to-bitrise-io@2: {}
    before_run:
    - prep_all
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
  ui-tests-2:
    steps:
    - script@1:
        inputs:
        - content: IOS_SIMULATOR_UDID=`xcrun xctrace list devices 2>&1 | grep "iPhone 12 mini Simulator\ (16.4)" | awk -F " " '{print $NF}' | tr -d "()" |tail -1` && open -a "simulator" --args -CurrentDeviceUDID $IOS_SIMULATOR_UDID
        title: Warm up emulator (iPhone 12 mini, OS=16.4)
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: PaymentSheet Example
        - test_plan: PaymentSheet Example-Shard2
        - log_formatter: xcbeautify
        - xcodebuild_options: -parallel-testing-enabled YES -maximum-parallel-testing-workers 2
    - deploy-to-bitrise-io@2: {}
    before_run:
    - prep_all
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
  ui-tests-3:
    steps:
    - script@1:
        inputs:
        - content: IOS_SIMULATOR_UDID=`xcrun xctrace list devices 2>&1 | grep "iPhone 12 mini Simulator\ (16.4)" | awk -F " " '{print $NF}' | tr -d "()" |tail -1` && open -a "simulator" --args -CurrentDeviceUDID $IOS_SIMULATOR_UDID
        title: Warm up emulator (iPhone 12 mini, OS=16.4)
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: PaymentSheet Example
        - test_plan: PaymentSheet Example-Shard3
        - log_formatter: xcbeautify
        - xcodebuild_options: -parallel-testing-enabled YES -maximum-parallel-testing-workers 2
    - deploy-to-bitrise-io@2: {}
    before_run:
    - prep_all
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
  ui-tests-4:
    steps:
    - script@1:
        inputs:
        - content: IOS_SIMULATOR_UDID=`xcrun xctrace list devices 2>&1 | grep "iPhone 12 mini Simulator\ (16.4)" | awk -F " " '{print $NF}' | tr -d "()" |tail -1` && open -a "simulator" --args -CurrentDeviceUDID $IOS_SIMULATOR_UDID
        title: Warm up emulator (iPhone 12 mini, OS=16.4)
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: PaymentSheet Example
        - test_plan: PaymentSheet Example-Shard4
        - log_formatter: xcbeautify
        - xcodebuild_options: -parallel-testing-enabled YES -maximum-parallel-testing-workers 2
    - deploy-to-bitrise-io@2: {}
    before_run:
    - prep_all
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
  ui-tests-5:
    steps:
    - script@1:
        inputs:
        - content: IOS_SIMULATOR_UDID=`xcrun xctrace list devices 2>&1 | grep "iPhone 12 mini Simulator\ (16.4)" | awk -F " " '{print $NF}' | tr -d "()" |tail -1` && open -a "simulator" --args -CurrentDeviceUDID $IOS_SIMULATOR_UDID
        title: Warm up emulator (iPhone 12 mini, OS=16.4)
    - xcode-test@4:
        inputs:
        - destination: $DEFAULT_TEST_DEVICE
        - test_repetition_mode: retry_on_failure
        - maximum_test_repetitions: "2"
        - scheme: StripeConnect Example
        - test_plan: StripeConnectExample
        - log_formatter: xcbeautify
        - xcodebuild_options: -parallel-testing-enabled YES -maximum-parallel-testing-workers 2
    - deploy-to-bitrise-io@2: {}
    before_run:
    - prep_all
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
  upload_logs:
    steps:
    - deploy-to-bitrise-io@2:
        inputs:
        - notify_user_groups: none
        - is_compress: "true"
        - deploy_path: build-ci-tests/Logs/Test
        - is_enable_public_page: "false"
        title: Deploy test log artifacts
  # Optimized workflows for conditional execution
  detect-changes:
    steps:
    - script@1:
        inputs:
        - content: |
            #!/bin/bash
            set -e
            
            # Fetch the base branch for comparison
            git fetch origin master:master || true
            
            # Run change detection
            ruby ./ci_scripts/detect_changes.rb master
            
            # Source the environment variables
            if [ -f test_matrix.json ]; then
              export SKIP_ALL_TESTS=$(cat test_matrix.json | jq -r '.skip_all_tests')
              export FRAMEWORKS_TO_TEST=$(cat test_matrix.json | jq -r '.frameworks_to_test | join(",")')
              export RUN_INTEGRATION_TESTS=$(cat test_matrix.json | jq -r '.run_integration_tests')
              export RUN_UI_TESTS=$(cat test_matrix.json | jq -r '.run_ui_tests')
              export RUN_LINT=$(cat test_matrix.json | jq -r '.run_lint')
              export RUN_FRAMEWORK_TESTS=$(cat test_matrix.json | jq -r '.run_framework_tests')
              
              # Set Bitrise environment variables
              envman add --key SKIP_ALL_TESTS --value "$SKIP_ALL_TESTS"
              envman add --key FRAMEWORKS_TO_TEST --value "$FRAMEWORKS_TO_TEST"
              envman add --key RUN_INTEGRATION_TESTS --value "$RUN_INTEGRATION_TESTS"
              envman add --key RUN_UI_TESTS --value "$RUN_UI_TESTS"
              envman add --key RUN_LINT --value "$RUN_LINT"
              envman add --key RUN_FRAMEWORK_TESTS --value "$RUN_FRAMEWORK_TESTS"
              
              echo "🎯 Change detection complete:"
              echo "  SKIP_ALL_TESTS: $SKIP_ALL_TESTS"
              echo "  FRAMEWORKS_TO_TEST: $FRAMEWORKS_TO_TEST"
              echo "  RUN_INTEGRATION_TESTS: $RUN_INTEGRATION_TESTS"
              echo "  RUN_UI_TESTS: $RUN_UI_TESTS"
              echo "  RUN_LINT: $RUN_LINT"
              echo "  RUN_FRAMEWORK_TESTS: $RUN_FRAMEWORK_TESTS"
            else
              echo "❌ test_matrix.json not found, falling back to full test suite"
              envman add --key SKIP_ALL_TESTS --value "false"
              envman add --key RUN_FRAMEWORK_TESTS --value "true"
              envman add --key RUN_INTEGRATION_TESTS --value "true"
              envman add --key RUN_UI_TESTS --value "true"
              envman add --key RUN_LINT --value "true"
            fi
        title: Detect Changes and Set Test Matrix
    before_run:
    - prep_all
  conditional-framework-tests:
    steps:
    - script@1:
        inputs:
        - content: |
            #!/bin/bash
            set -e
            
            if [ "$SKIP_ALL_TESTS" = "true" ]; then
              echo "📝 Skipping framework tests - only docs/assets changed"
              exit 0
            fi
            
            IFS=',' read -ra FRAMEWORKS <<< "$FRAMEWORKS_TO_TEST"
            
            for framework in "${FRAMEWORKS[@]}"; do
              if [ -n "$framework" ]; then
                echo "🧪 Testing framework: $framework"
                case "$framework" in
                  "StripeiOS"|"Stripe")
                    bundle exec xcodebuild test -workspace Stripe.xcworkspace -scheme "StripeiOS" -destination "$DEFAULT_TEST_DEVICE" -quiet SWIFT_SUPPRESS_WARNINGS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
                    ;;
                  "StripeCore")
                    bundle exec xcodebuild test -workspace Stripe.xcworkspace -scheme "StripeCore" -destination "$DEFAULT_TEST_DEVICE" -quiet SWIFT_SUPPRESS_WARNINGS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
                    ;;
                  "StripePayments")
                    bundle exec xcodebuild test -workspace Stripe.xcworkspace -scheme "StripePayments" -destination "$DEFAULT_TEST_DEVICE" -quiet SWIFT_SUPPRESS_WARNINGS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
                    ;;
                  "StripePaymentsUI")
                    bundle exec xcodebuild test -workspace Stripe.xcworkspace -scheme "StripePaymentsUI" -destination "$DEFAULT_TEST_DEVICE" -quiet SWIFT_SUPPRESS_WARNINGS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
                    ;;
                  "StripePaymentSheet")
                    bundle exec xcodebuild test -workspace Stripe.xcworkspace -scheme "StripePaymentSheet" -destination "$DEFAULT_TEST_DEVICE" -quiet SWIFT_SUPPRESS_WARNINGS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
                    ;;
                  "StripeUICore")
                    bundle exec xcodebuild test -workspace Stripe.xcworkspace -scheme "StripeUICore" -destination "$DEFAULT_TEST_DEVICE" -quiet SWIFT_SUPPRESS_WARNINGS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
                    ;;
                  "StripeConnect")
                    bundle exec xcodebuild test -workspace Stripe.xcworkspace -scheme "StripeConnect" -destination "$DEFAULT_TEST_DEVICE" -quiet SWIFT_SUPPRESS_WARNINGS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
                    ;;
                  "StripeIdentity")
                    bundle exec xcodebuild test -workspace Stripe.xcworkspace -scheme "StripeIdentity" -destination "$DEFAULT_TEST_DEVICE" -quiet SWIFT_SUPPRESS_WARNINGS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
                    ;;
                  "StripeFinancialConnections")
                    bundle exec xcodebuild test -workspace Stripe.xcworkspace -scheme "StripeFinancialConnections" -destination "$DEFAULT_TEST_DEVICE" -quiet SWIFT_SUPPRESS_WARNINGS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
                    ;;
                  "StripeCardScan")
                    bundle exec xcodebuild test -workspace Stripe.xcworkspace -scheme "StripeCardScan" -destination "$DEFAULT_TEST_DEVICE" -quiet SWIFT_SUPPRESS_WARNINGS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
                    ;;
                  "StripeApplePay")
                    bundle exec xcodebuild test -workspace Stripe.xcworkspace -scheme "StripeApplePay" -destination "$DEFAULT_TEST_DEVICE" -quiet SWIFT_SUPPRESS_WARNINGS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
                    ;;
                  "StripeCameraCore")
                    bundle exec xcodebuild test -workspace Stripe.xcworkspace -scheme "StripeCameraCore" -destination "$DEFAULT_TEST_DEVICE" -quiet SWIFT_SUPPRESS_WARNINGS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
                    ;;
                  *)
                    echo "⚠️ Unknown framework: $framework"
                    ;;
                esac
              fi
            done
        title: Run Framework Tests
    - deploy-to-bitrise-io@2: {}
    - save-spm-cache@1: {}
    before_run:
    - prep_all
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
  conditional-ui-tests:
    steps:
    - script@1:
        inputs:
        - content: |
            #!/bin/bash
            set -e
            
            if [ "$SKIP_ALL_TESTS" = "true" ]; then
              echo "📝 Skipping UI tests - only docs/assets changed"
              exit 0
            fi
            
            echo "🎭 Running UI tests..."
            
            # Warm up emulator
            IOS_SIMULATOR_UDID=`xcrun xctrace list devices 2>&1 | grep "iPhone 12 mini Simulator\ (16.4)" | awk -F " " '{print $NF}' | tr -d "()" |tail -1`
            open -a "simulator" --args -CurrentDeviceUDID $IOS_SIMULATOR_UDID
            
            # Run PaymentSheet UI tests if needed
            if [[ "$FRAMEWORKS_TO_TEST" == *"StripePaymentSheet"* ]]; then
              echo "🧪 Running PaymentSheet UI tests..."
              bundle exec xcodebuild test -workspace Stripe.xcworkspace -scheme "PaymentSheet Example" -testPlan "PaymentSheet Example-Shard1" -destination "$DEFAULT_TEST_DEVICE" -quiet SWIFT_SUPPRESS_WARNINGS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
              bundle exec xcodebuild test -workspace Stripe.xcworkspace -scheme "PaymentSheet Example" -testPlan "PaymentSheet Example-Shard2" -destination "$DEFAULT_TEST_DEVICE" -quiet SWIFT_SUPPRESS_WARNINGS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
            fi
            
            # Run Connect UI tests if needed
            if [[ "$FRAMEWORKS_TO_TEST" == *"StripeConnect"* ]]; then
              echo "🧪 Running Connect UI tests..."
              bundle exec xcodebuild test -workspace Stripe.xcworkspace -scheme "StripeConnect Example" -testPlan "StripeConnectExample" -destination "$DEFAULT_TEST_DEVICE" -quiet SWIFT_SUPPRESS_WARNINGS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
            fi
        title: Run UI Tests
    - deploy-to-bitrise-io@2: {}
    before_run:
    - prep_all
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
  conditional-integration-tests:
    steps:
    - script@1:
        inputs:
        - content: |
            #!/bin/bash
            set -e
            
            if [ "$SKIP_ALL_TESTS" = "true" ]; then
              echo "📝 Skipping integration tests - only docs/assets changed"
              exit 0
            fi
            
            echo "🔗 Running integration tests..."
            bundle exec xcodebuild test -workspace Stripe.xcworkspace -scheme "IntegrationTester" -destination "$DEFAULT_TEST_DEVICE" -quiet SWIFT_SUPPRESS_WARNINGS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
        title: Run Integration Tests
    - deploy-to-bitrise-io@2: {}
    before_run:
    - prep_all
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
  conditional-lint-tests:
    steps:
    - script@1:
        inputs:
        - content: |
            #!/bin/bash
            set -e
            
            if [ "$SKIP_ALL_TESTS" = "true" ]; then
              echo "📝 Skipping lint tests - only docs/assets changed"
              exit 0
            fi
            
            echo "🔍 Running lint checks..."
            ./ci_scripts/lint_modified_files.sh
            ./ci_scripts/check_paymentsheet_test_sharding.rb
            ./ci_scripts/check_image_format.sh
            bundle exec fastlane build_extras
            bundle exec fastlane analyze
        title: Run Lint Tests
    before_run:
    - prep_all
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
  conditional-build-tests:
    steps:
    - script@1:
        inputs:
        - content: |
            #!/bin/bash
            set -e
            
            if [ "$SKIP_ALL_TESTS" = "true" ]; then
              echo "📝 Skipping build tests - only docs/assets changed"
              exit 0
            fi
            
            echo "🏗️ Running build tests..."
            bundle exec xcodebuild build-for-testing -workspace Stripe.xcworkspace -scheme "AllStripeFrameworks" -destination "generic/platform=iOS Simulator" -quiet SWIFT_SUPPRESS_WARNINGS=YES SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
        title: Run Build Tests
    before_run:
    - prep_all
    meta:
      bitrise.io:
        stack: osx-xcode-15.0.x
        machine_type_id: g2.mac.large
meta:
  bitrise.io:
    stack: osx-xcode-15.0.x
    machine_type_id: g2.mac.large
